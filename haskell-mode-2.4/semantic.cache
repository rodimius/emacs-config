;; Object haskell-mode-2.4/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "haskell-mode-2.4/"
  :tables (list 
   (semanticdb-table "inf-haskell.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("comint" include nil nil [1194 1211]) ("shell" include nil nil [1212 1228]) ("compile" include nil nil [1277 1295]) ("haskell-mode" include nil nil [1296 1319]) ("cl" include nil nil [1339 1352]) ("haskell-program-name" variable (:default-value (or (cond ((not (fboundp (quote executable-find))) nil) ((executable-find "ghci") "ghci") ((executable-find "hugs") "hugs \"+.\"")) "hugs \"+.\"")) nil [1440 1982]) ("inferior-haskell-info-xref-re" variable (:constant-flag t :default-value "	-- Defined at \\(.+\\):\\([0-9]+\\):\\([0-9]+\\)$") nil [1984 2080]) ("inferior-haskell-module-re" variable (:constant-flag t :default-value "	-- Defined in \\(.+\\)$") nil [2082 2208]) ("inferior-haskell-error-regexp-alist" variable (:constant-flag t :default-value (\` (("^ERROR \"\\(.+?\\)\"\\(:\\| line \\)\\([0-9]+\\) - " 1 3) ("^\\(.+?\\):\\([0-9]+\\):\\(\\([0-9]+\\):\\)?\\( \\|
 *\\)\\(Warning\\)?" 1 2 4 (\,@ (if (fboundp (quote compilation-fake-loc)) (quote ((6) nil (5 (quote (face nil font-lock-multiline t)))))))) ("^\\*\\*\\* Exception: \\(.+?\\):(\\([0-9]+\\),\\([0-9]+\\))-(\\([0-9]+\\),\\([0-9]+\\)): .*" 1 (\,@ (if (fboundp (quote compilation-fake-loc)) (quote ((2 . 4) (3 . 5))) (quote (2 3))))) ("^\\*\\*\\* Exception: \\(.+?\\):\\([0-9]+\\):\\([0-9]+\\)-\\([0-9]+\\): .*" 1 2 (\, (if (fboundp (quote compilation-fake-loc)) (quote (3 . 4)) 3))) (\,@ (when (fboundp (quote compilation-fake-loc)) (\` (("^[ 	]+at \\(.+\\):\\([0-9]+\\):\\([0-9]+\\)-\\([0-9]+\\)$" 1 2 (3 . 4) 0) ("[ (]defined at \\(.+\\):\\([0-9]+\\):\\([0-9]+\\))?$" 1 2 3 0) ("imported from .* at \\(.+\\):\\([0-9]+\\):\\([0-9]+\\)-\\([0-9]+\\)$" 1 2 (3 . 4) 0) ((\, inferior-haskell-info-xref-re) 1 2 3 0)))))))) nil [2210 4122]) ("inferior-haskell-find-project-root" variable (:default-value t) nil [4124 4337]) ("define-derived-mode" code nil nil [4339 6065]) ("inferior-haskell-string-to-strings" function (:arguments ("string")) nil [6067 6538]) ("inferior-haskell-command" function (:arguments ("arg")) nil [6540 6724]) ("inferior-haskell-buffer" variable nil nil [6726 6819]) ("inferior-haskell-start-process" function (:user-visible-flag t :arguments ("command")) nil [6821 7416]) ("inferior-haskell-process" function (:arguments ("&optional" "arg")) nil [7418 7752]) ("defalias" code nil nil [7769 7811]) ("switch-to-haskell" function (:user-visible-flag t :arguments ("&optional" "arg")) nil [7827 8046]) ("unless" code nil nil [8069 8238]) ("inferior-haskell-wait-and-jump" variable nil nil [8241 8396]) ("inferior-haskell-wait-for-prompt" function (:arguments ("proc")) nil [8398 8774]) ("inferior-haskell-cabal-buffer" variable nil nil [8776 8818]) ("inferior-haskell-cabal-of-buf" function (:arguments ("buf")) nil [8820 9143]) ("inferior-haskell-find-project-root" function (:arguments ("buf")) nil [9145 11601]) ("inferior-haskell-load-file" function (:user-visible-flag t :arguments ("&optional" "reload")) nil [11620 13881]) ("inferior-haskell-run-command" variable (:default-value ":main") nil [13888 13933]) ("inferior-haskell-load-and-run" function (:user-visible-flag t :arguments ("command")) nil [13935 14472]) ("inferior-haskell-send-command" function (:arguments ("proc" "str")) nil [14474 14793]) ("inferior-haskell-reload-file" function (:user-visible-flag t) nil [14795 14964]) ("inferior-haskell-type" function (:user-visible-flag t :arguments ("expr" "&optional" "insert-value")) nil [14981 17388]) ("inferior-haskell-info" function (:user-visible-flag t :arguments ("sym")) nil [17405 18582]) ("inferior-haskell-find-definition" function (:user-visible-flag t :arguments ("sym")) nil [18599 19717]) ("inferior-haskell-use-web-docs" variable (:default-value (quote fallback)) nil [19924 20518]) ("inferior-haskell-web-docs-base" variable (:default-value "http://haskell.org/ghc/docs/latest/html/libraries/") nil [20520 20805]) ("haskell-package-manager-name" variable (:default-value "ghc-pkg") nil [20807 20953]) ("haskell-package-conf-file" variable (:default-value (ignore-errors (with-temp-buffer (call-process "ghc" nil t nil "--print-libdir") (expand-file-name "package.conf" (buffer-substring (point-min) (1- (point-max))))))) nil [20955 21368]) ("inferior-haskell-get-module" function (:arguments ("sym")) nil [21370 21692]) ("inferior-haskell-query-ghc-pkg" function (:arguments ("&rest" "args")) nil [21694 21938]) ("inferior-haskell-get-package-list" function nil nil [21940 22219]) ("inferior-haskell-compute-module-alist" function nil nil [22221 23467]) ("inferior-haskell-module-alist-file" variable (:default-value (expand-file-name (concat "inf-haskell-module-alist-" (number-to-string (user-uid))) temporary-file-directory)) nil [23470 23911]) ("inferior-haskell-module-alist" variable nil nil [23913 24396]) ("inferior-haskell-module-alist" function nil nil [24398 25989]) ("inferior-haskell-ghc-internal-ident-alist" variable (:default-value (quote (("GHC.Base.return" . "Control.Monad.return") ("GHC.List" . "Data.List")))) nil [25991 26179]) ("inferior-haskell-map-internal-ghc-ident" function (:arguments ("ident")) nil [26181 26752]) ("inferior-haskell-find-haddock" function (:user-visible-flag t :arguments ("sym")) nil [26769 28652]) ("inf-haskell" package nil nil [28654 28676]))
    :file "inf-haskell.el"
    :pointmax 28757
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
