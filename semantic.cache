;; Object emacs/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs/"
  :tables (list 
   (semanticdb-table "ruby-mode.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ruby-mode-revision" variable (:constant-flag t :default-value "$Revision: 1.74.2.14 $") nil [135 189]) ("ruby-mode-version" variable (:constant-flag t :default-value (progn (string-match "[0-9.]+" ruby-mode-revision) (substring ruby-mode-revision (match-beginning 0) (match-end 0)))) nil [191 344]) ("ruby-block-beg-re" variable (:constant-flag t :default-value "class\\|module\\|def\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin\\|do") nil [346 458]) ("ruby-non-block-do-re" variable (:constant-flag t :default-value "\\(while\\|until\\|for\\|rescue\\)\\>") nil [460 536]) ("ruby-indent-beg-re" variable (:constant-flag t :default-value "\\(\\s *\\(class\\|module\\|def\\)\\)\\|if\\|unless\\|case\\|while\\|until\\|for\\|begin") nil [538 665]) ("ruby-modifier-beg-re" variable (:constant-flag t :default-value "if\\|unless\\|while\\|until") nil [667 733]) ("ruby-modifier-re" variable (:constant-flag t :default-value (concat ruby-modifier-beg-re "\\|rescue")) nil [735 809]) ("ruby-block-mid-re" variable (:constant-flag t :default-value "then\\|else\\|elsif\\|when\\|rescue\\|ensure") nil [811 891]) ("ruby-block-op-re" variable (:constant-flag t :default-value "and\\|or\\|not") nil [893 942]) ("ruby-block-hanging-re" variable (:constant-flag t :default-value (concat ruby-modifier-beg-re "\\|" ruby-block-op-re)) nil [944 1034]) ("ruby-block-end-re" variable (:constant-flag t :default-value "end") nil [1036 1070]) ("ruby-here-doc-beg-re" variable (:constant-flag t :default-value "<<\\(-\\)?\\(\\([a-zA-Z0-9_]+\\)\\|[\"]\\([^\"]+\\)[\"]\\|[']\\([^']+\\)[']\\)") nil [1072 1186]) ("ruby-here-doc-end-match" function nil nil [1188 1369]) ("ruby-delimiter" variable (:constant-flag t :default-value (concat "[?$/%(){}#\"'`.:]\\|<<\\|\\[\\|\\]\\|\\<\\(" ruby-block-beg-re "\\|" ruby-block-end-re "\\)\\>\\|^=begin\\|" ruby-here-doc-beg-re)) nil [1371 1550]) ("ruby-negative" variable (:constant-flag t :default-value (concat "^[ 	]*\\(\\(" ruby-block-mid-re "\\)\\>\\|\\(" ruby-block-end-re "\\)\\>\\|}\\|\\]\\)")) nil [1552 1684]) ("ruby-operator-chars" variable (:constant-flag t :default-value "-,.+*/%&|^~=<>:") nil [1686 1734]) ("ruby-operator-re" variable (:constant-flag t :default-value (concat "[" ruby-operator-chars "]")) nil [1735 1799]) ("ruby-symbol-chars" variable (:constant-flag t :default-value "a-zA-Z0-9_") nil [1801 1842]) ("ruby-symbol-re" variable (:constant-flag t :default-value (concat "[" ruby-symbol-chars "]")) nil [1843 1903]) ("ruby-mode-abbrev-table" variable nil nil [1905 1986]) ("define-abbrev-table" code nil nil [1988 2036]) ("ruby-mode-map" variable nil nil [2038 2092]) ("if" code nil nil [2094 2969]) ("ruby-mode-syntax-table" variable nil nil [2971 3052]) ("if" code nil nil [3054 4569]) ("ruby-indent-tabs-mode" variable (:user-visible-flag t) nil [4571 4704]) ("ruby-indent-level" variable (:user-visible-flag t :default-value 2) nil [4706 4804]) ("ruby-comment-column" variable (:user-visible-flag t :default-value 32) nil [4806 4907]) ("ruby-deep-arglist" variable (:user-visible-flag t :default-value t) nil [4909 5058]) ("ruby-deep-indent-paren" variable (:user-visible-flag t :default-value (quote (40 91 93 t))) nil [5060 5254]) ("ruby-deep-indent-paren-style" variable (:default-value (quote space)) nil [5256 5373]) ("cl" include nil nil [5394 5407]) ("ruby-imenu-create-index-in-block" function (:arguments ("prefix" "beg" "end")) nil [5409 6736]) ("ruby-imenu-create-index" function nil nil [6738 6840]) ("ruby-accurate-end-of-block" function (:arguments ("&optional" "end")) nil [6842 7052]) ("ruby-mode-variables" function nil nil [7054 8089]) ("ruby-mode" function (:user-visible-flag t) nil [8106 8844]) ("ruby-current-indentation" function nil nil [8846 8971]) ("ruby-indent-line" function (:arguments ("&optional" "flag")) nil [8973 9107]) ("ruby-indent-command" function nil nil [9109 9178]) ("ruby-indent-to" function (:arguments ("x")) nil [9180 9693]) ("ruby-special-char-p" function (:arguments ("&optional" "pnt")) nil [9695 9975]) ("ruby-expr-beg" function (:arguments ("&optional" "option")) nil [9977 11036]) ("ruby-forward-string" function (:arguments ("term" "&optional" "end" "no-error" "expand")) nil [11038 11579]) ("ruby-deep-indent-paren-p" function (:arguments ("c")) nil [11581 11941]) ("ruby-parse-partial" function (:arguments ("&optional" "end" "in-string" "nest" "depth" "pcol" "indent")) nil [11943 18011]) ("ruby-parse-region" function (:arguments ("start" "end")) nil [18013 18469]) ("ruby-indent-size" function (:arguments ("pos" "nest")) nil [18471 18550]) ("ruby-calculate-indent" function (:arguments ("&optional" "parse-start")) nil [18552 23919]) ("ruby-electric-brace" function (:arguments ("arg")) nil [23921 24103]) ("defun-region-command" function (:arguments ("func" "args" "&rest" "body")) nil [24126 24445]) ("defun-region-command" code nil nil [24448 24804]) ("ruby-beginning-of-indent" function nil nil [24806 24971]) ("defun-region-command" code nil nil [24973 25327]) ("ruby-move-to-block" function (:arguments ("n")) nil [25329 26202]) ("defun-region-command" code nil nil [26204 26369]) ("defun-region-command" code nil nil [26371 26525]) ("defun-region-command" code nil nil [26527 27822]) ("defun-region-command" code nil nil [27824 29134]) ("ruby-reindent-then-newline-and-indent" function nil nil [29136 29387]) ("fset" code nil nil [29389 29452]) ("ruby-decomment-region" function (:arguments ("beg" "end")) nil [29454 29686]) ("ruby-insert-end" function nil nil [29688 29786]) ("ruby-mark-defun" function (:user-visible-flag t) nil [29788 30038]) ("ruby-indent-exp" function (:user-visible-flag t :arguments ("&optional" "shutup-p")) nil [30040 30793]) ("ruby-add-log-current-method" function nil nil [30795 31817]) ("cond" code nil nil [31819 38715]) ("ruby-mode" package nil nil [38718 38738]))
    :file "ruby-mode.el"
    :pointmax 38739
    )
   (semanticdb-table "ruby-electric.el"
    :major-mode 'emacs-lisp-mode
    :tags '(("ruby-mode" include nil nil [1406 1426]) ("ruby-electric-expandable-do-re" variable (:constant-flag t :default-value "do\\s-$") nil [1428 1481]) ("ruby-electric-expandable-bar" variable (:constant-flag t :default-value "\\s-\\(do\\|{\\)\\s-+|") nil [1483 1549]) ("ruby-electric-matching-delimeter-alist" variable (:default-value (quote ((91 . 93) (40 . 41) (39 . 39) (96 . 96) (34 . 34)))) nil [1551 1679]) ("ruby-electric-simple-keywords-re" variable (:user-visible-flag t :default-value "\\(def\\|if\\|class\\|module\\|unless\\|case\\|while\\|do\\|until\\|for\\|begin\\)") nil [1681 1935]) ("ruby-electric-expand-delimiters-list" variable (:user-visible-flag t :default-value (quote (all))) nil [1937 2460]) ("ruby-electric-newline-before-closing-bracket" variable (:user-visible-flag t) nil [2463 2648]) ("define-minor-mode" code nil nil [2650 3343]) ("ruby-electric-setup-keymap" function nil nil [3345 3793]) ("ruby-electric-space" function (:arguments ("arg")) nil [3795 4021]) ("ruby-electric-code-at-point-p" function nil nil [4023 4259]) ("ruby-electric-string-at-point-p" function nil nil [4261 4403]) ("ruby-electric-is-last-command-char-expandable-punct-p" function nil nil [4405 4592]) ("ruby-electric-space-can-be-expanded-p" function nil nil [4595 5167]) ("ruby-electric-curlies" function (:arguments ("arg")) nil [5170 5696]) ("ruby-electric-matching-char" function (:arguments ("arg")) nil [5698 6027]) ("ruby-electric-bar" function (:arguments ("arg")) nil [6029 6425]) ("ruby-electric" package nil nil [6428 6452]))
    :file "ruby-electric.el"
    :pointmax 6453
    )
   )
  :file "semantic.cache"
  :semantic-tag-version "2.0pre4"
  :semanticdb-version "2.0pre4"
  )
